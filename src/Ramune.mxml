<?xml version="1.0" encoding="utf-8"?>
<!--

Ramune - Flash Video Conferencing

Copyright Â© 2008 The Regents of the University of California
All Rights Reserved 

Created by Hector Guillermo Parra, hector@hectorparra.com
California Institute for Telecommunications and Information Technology
University of California, Irvine

-->
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:ramune="*"
	layout="absolute"
	width="0"
	height="0"
	preinitialize="onPreinitialize()"
	initialize="onInitialize()"
	creationComplete="onCreationComplete()"
	applicationComplete="onApplicationComplete()"
	doubleClick="onDoubleClick()"
	backgroundColor="#000000">
	
	<fab:FABridge xmlns:fab="bridge.*" />
	
	<mx:Script>
	<![CDATA[
		import mx.controls.Alert;
		
		private var STRATUS_URL:String = "rtmfp://stratus.adobe.com/957c10737240a05c0143ce7f-b33403f49938";
		
		private var settings:SharedObject;
		private var netConnection:NetConnection;
		private var listenerStream:NetStream;		// listens for incoming call
		private var controlStream:NetStream;		// caller's incoming to callee's listener
		private var outgoingStream:NetStream;
		private var incomingStream:NetStream;

		// Ramune State Machine
		private var callState:String;
		private const CALL_NOT_READY:String = "RamuneCallNotReady";
		private const CALL_READY:String = "RamuneCallReady";
		private const CALL_CALLING:String = "RamuneCallCalling";
		private const CALL_RINGING:String = "RamuneCallRinging";
		private const CALL_ESTABLISHED:String = "RamuneCallEstablished";
		private const CALL_FAILED:String = "RamuneCallFailed";

		private var cams:Array;
		private var mics:Array;
		private var default_cam_index:int;
		private var default_mic_index:int;
		private var remoteName:String;
		

		private var remoteVideoIndex:int = -1;
		private var localVideoIndex:int = -1;

		private var previousWidth:uint;
		private var previousHeight:uint;
		
		// FIXME: Extracted from old version. Clean up.
		/**
		 * There are three sets of parameter sources.
		 * Order of precedence:
		 * - URL query string
		 * - FlashVars
		 * - Program Hash (Object)
		 */
		[Bindable]
		protected var params:Object = {
			serverURI: STRATUS_URL,
			width: 640,
			height: 480,
			bandwidth: 0,
			quality: 95,
			fps: 25,
			keyFrameInterval: 25,
			localScale: 0.25
		};
		
		/*
		 * Uber Methods
		 */
		public function getRemoteSharedObject(name:String, localPath:String, persistence:Object = false, secure:Boolean = false):SharedObject {
			return SharedObject.getRemote(name, localPath, persistence, secure);
		}
		public function newNetConnection():NetConnection {
			return new NetConnection();
		}

		
		private function onPreinitialize():void {
		}
		private function onInitialize():void {		
		}
		private function onCreationComplete():void {
			this.doubleClickEnabled = true;
		 	this.verticalScrollPolicy = "off";
			this.horizontalScrollPolicy = "off";
			this.parseParams();
		}
		private function onApplicationComplete():void {
			this.changeCallState(CALL_NOT_READY);
			
			debug("Player: " + Capabilities.version);

			if (!ExternalInterface.available) {
				debug("ExternalInterface not available!");
				return;
			}

			// TODO: These have a tendency not to work!
			//ExternalInterface.addCallback("placeCall", placeCall);
			//ExternalInterface.addCallback("acceptCall", acceptCall);
			//ExternalInterface.addCallback("endCall", endCall); 
			
			initializeCams();
			initializeMics();
			//initializeSettings(); // TODO: Finish
			
			this.setSize(0, 0);
			
			//ExternalInterface.call(id + "")
			debug("ApplicationComplete");
        }
        private function changeCallState(state:String):void {
        	switch (state) {
        		case CALL_NOT_READY:
        		case CALL_READY:
        		case CALL_CALLING:
        		case CALL_RINGING:
        		case CALL_ESTABLISHED:
        		case CALL_FAILED:
        			callState = state;
        			debug("State Changed: " + state);
        			ExternalInterface.call("Ramune.triggerCallStateChangeEvent", state);
        			break;
        		default:
        			// TODO: Unknown State Exception
        			break;
        	}
        }
        public function connect():void {
        	netConnection = new NetConnection();
        	netConnection.addEventListener(NetStatusEvent.NET_STATUS, netConnectionHandler);
        	netConnection.connect(params.serverURI);
        }
    	private function netConnectionHandler(event:NetStatusEvent):void
		{
			debug("NetConnection event: " + event.info.code);
			
        	switch (event.info.code)
        	{
            	case "NetConnection.Connect.Success":
            		debug("Successfully connected to " + netConnection.uri);
            		debug("NearID: " + netConnection.nearID);
            		// CHANGED: Reporting nearID to Javascript
            		// FIXME: Change name to reflect what is happening here
            		//ExternalInterface.call("jRamune.onNetConnectionSuccess", netConnection.nearID);
            		ExternalInterface.call("Ramune.triggerEvent", "NetConnectionSuccess", netConnection.nearID);
            		onNetConnectSuccess();
                	break;
                	
                case "NetConnection.Connect.Closed": // TODO: jRamune.onNetConnectionClosed
                	changeCallState(CALL_NOT_READY);
                	break;
                	
                case "NetStream.Connect.Success":
                	// we get this when other party connects to our control stream our outgoing stream
                	debug("Connection from: " + event.info.stream.farID);
                	break;
                	
                case "NetConnection.Connect.Failed":
                	debug("Unable to connect to " + netConnection.uri);
                	break;
                	
                case "NetStream.Connect.Closed":
					endCall();
                	break;
         	}
     	}
     	

     	private function onNetConnectSuccess():void {
			listenerStream = new NetStream(netConnection, NetStream.DIRECT_CONNECTIONS); // start the control stream that will listen to incoming calls
			listenerStream.addEventListener(NetStatusEvent.NET_STATUS, function(event:NetStatusEvent):void {
				debug("listenerStream event: " + event.info.code);
			});
			listenerStream.publish("control" + "MY_USERNAME"); // FIXME: Name properly!

			var c:Object = new Object();
			c.onPeerConnect = function(caller:NetStream):Boolean {
				debug("Caller connecting to listener stream. FarID: " + caller.farID);
				if (callState == CALL_READY) {
					changeCallState(CALL_RINGING);

					incomingStream = new NetStream(netConnection, caller.farID); // callee subscribes to media, to be able to get the remote user name
					incomingStream.addEventListener(NetStatusEvent.NET_STATUS, function(event:NetStatusEvent):void {
						debug("Incoming stream event: " + event.info.code);
		            	switch (event.info.code) {
		            		case "NetStream.Play.UnpublishNotify":
		            			endCall();
		            			break;
		             	}
					});
					incomingStream.play("media-caller");
					
					// set volume for incoming stream
					//var st:SoundTransform = new SoundTransform(speakerVolumeSlider.value);
					//incomingStream.soundTransform = st;

					incomingStream.receiveAudio(false);
					incomingStream.receiveVideo(false);

					var i:Object = new Object();
					i.onIncomingCall = function(caller:String):void {
						if (callState != CALL_RINGING) {
							debug("onIncomingCall: Wrong call state: " + callState);
						}
						else {
							remoteName = caller;
							debug("Incoming call from: " + caller);	
						}
					}
					
					i.onIm = function(name:String, text:String):void {
						// TODO: JavaScript IM responder
					}
					incomingStream.client = i;

					return true;
				}

				debug("onPeerConnect: all rejected due to state: " + callState);
				return false;
			}
						
			listenerStream.client = c;						
			changeCallState(CALL_READY);
		}
		
		public function placeCall(user:String, identity:String):void {
			debug("Calling " + user + ", ID: " + identity);
						
			if (identity.length != 64) {
				debug("Invalid remote ID, call failed");
				changeCallState(CALL_FAILED);
				return;
			}
						
			// caller subsrcibes to callee's listener stream
			controlStream = new NetStream(netConnection, identity);
			controlStream.addEventListener(NetStatusEvent.NET_STATUS, function(event:NetStatusEvent):void {
				debug("Control event: " + event.info.code);
			});
			//controlStream.play("control" + user);
			controlStream.play("control" + "MY_USERNAME"); // FIXME: Hack!

			// caller publishes media stream
			outgoingStream = new NetStream(netConnection, NetStream.DIRECT_CONNECTIONS);
			outgoingStream.addEventListener(NetStatusEvent.NET_STATUS, function(event:NetStatusEvent):void {
				debug("Outgoing stream event: " + event.info.code);
            	switch (event.info.code) {
            		case "NetStream.Play.Start":
            			if (callState == CALL_CALLING) {
            				// FIX: Grab nearID/nearName from JS
            				outgoingStream.send("onIncomingCall", "MY_USERNAME"); // FIXME
            				//outgoingStream.send("onIncomingCall", userNameInput.text);
            			}
            			break;
            	}
			});
			outgoingStream.publish("media-caller");
						
			var o:Object = new Object();
			o.onPeerConnect = function(caller:NetStream):Boolean {
				debug("Callee connecting to media stream: " + caller.farID);
				return true;
			}
			outgoingStream.client = o;
													
			// caller subscribes to callee's media stream
			incomingStream = new NetStream(netConnection, identity);
			incomingStream.addEventListener(NetStatusEvent.NET_STATUS, function(event:NetStatusEvent):void {
				debug("Incoming stream event: " + event.info.code);
            	switch (event.info.code) {
            		case "NetStream.Play.UnpublishNotify":
            			endCall();
            			break;
             	}
			});
			incomingStream.play("media-callee");
			
			// set volume for incoming stream
			//var st:SoundTransform = new SoundTransform(speakerVolumeSlider.value);
			//incomingStream.soundTransform = st;
						
			var i:Object = new Object;
			i.onCallAccepted = function(callee:String):void {
				if (callState != CALL_CALLING) {
					debug("onCallAccepted: Wrong call state: " + callState);
					return;
				}
        		changeCallState(CALL_ESTABLISHED);
				debug("Call accepted by " + callee);

				setSize(params.width, params.height);
				setLocalVideo();
				outgoingStream.attachCamera(cams[default_cam_index]);
				outgoingStream.attachAudio(mics[default_mic_index]);
			}
			i.onIm = function(name:String, text:String):void {
				// TODO: Javascript IM
			}
			incomingStream.client = i;
			
			setRemoteVideo();
		
			//remoteName = user;
			changeCallState(CALL_CALLING);
		}
		private function setLocalVideo():void {
			if (localVideoIndex < 0)
				localVideoIndex = ui.newVideo(params.width, params.height, 20, 20, 0);
			ui.attachCameraToVideo(cams[default_cam_index], localVideoIndex);
			ui.resizeVideo(localVideoIndex, 160, 120);
		}
		private function setRemoteVideo():void {
			if (remoteVideoIndex < 0)
				remoteVideoIndex = ui.newVideo(params.width, params.height, 0, 0, 0);
			ui.attachNetStreamToVideo(incomingStream, remoteVideoIndex);
			ui.resizeVideo(remoteVideoIndex, params.width, params.height);
		}
		public function acceptCall():void {
			// FIXME: it shouldn't do any of this unless it's on the right state
			
			incomingStream.receiveAudio(true);
			incomingStream.receiveVideo(true);
			
			setSize(params.width, params.height); // Unhide
			setRemoteVideo();

			// callee publishes media
			outgoingStream = new NetStream(netConnection, NetStream.DIRECT_CONNECTIONS);
			outgoingStream.addEventListener(NetStatusEvent.NET_STATUS, function(event:NetStatusEvent):void {
				debug("Outgoing stream event: " + event.info.code);
            	switch (event.info.code)
            	{
            		case "NetStream.Play.Start":
            			if (callState == CALL_CALLING) {
            				outgoingStream.send("onIncomingCall", "MY_USERNAME"); // FIXME
            			}
            			break;
            	}
			});
			outgoingStream.publish("media-callee");
			
			var o:Object = new Object
			o.onPeerConnect = function(caller:	NetStream):Boolean {
				debug("Caller connecting to media stream: " + caller.farID + "\n");
				return true; 
			}
			outgoingStream.client = o;
			outgoingStream.send("onCallAccepted", "MY_USERNAME"); // FIXME
			
			setLocalVideo();
			outgoingStream.attachCamera(cams[default_cam_index]);
			outgoingStream.attachAudio(mics[default_mic_index]);
								
			changeCallState(CALL_ESTABLISHED);
		}
		public function endCall():void {
			debug("Ending call");
			
			if (incomingStream) {
				incomingStream.close();
				//incomingStream.removeEventListener(NetStatusEvent.NET_STATUS, incomingStreamHandler);
			}
			
			if (outgoingStream) {
				outgoingStream.attachCamera(null);
				outgoingStream.attachAudio(null);
				outgoingStream.close();
				//outgoingStream.removeEventListener(NetStatusEvent.NET_STATUS, outgoingStreamHandler);
			}
			
			if (controlStream) {
				controlStream.close();
				//controlStream.removeEventListener(NetStatusEvent.NET_STATUS, controlHandler);
			}
			
			// FIXME: See function in RamuneUI.as
			if (localVideoIndex > -1)
				ui.clearVideo(localVideoIndex);
			if (remoteVideoIndex > -1)
				ui.clearVideo(remoteVideoIndex);
			
			setSize(0, 0);
			
			// FIXME: Remove
			remoteName = "";
			
			incomingStream = null;
			outgoingStream = null;
			controlStream = null;
			if (localVideoIndex > -1)
				ui.attachCameraToVideo(null, localVideoIndex); // CHANGED: Killing local camera
			
			changeCallState(CALL_READY);
		}
		public function ignoreCall():void {
			if (callState == CALL_RINGING)
				endCall();
		}
		public function cancelCall():void {
			if (callState == CALL_CALLING)
				endCall();
		}
/*******************/
		public function initializeCams():void {
			if (Camera.names.length > 0) {
				cams = new Array();
				for (var i:uint = 0; i < Camera.names.length; ++i) {
					debug("Found Camera " + i + ": " + Camera.names[i]);
					cams.push(Camera.getCamera(i.toString()));
					cams[i].setQuality(params.bandwidth, params.quality);
					cams[i].setMode(params.width, params.height, params.fps);
					cams[i].setKeyFrameInterval(25);
				}
				default_cam_index = Camera.getCamera(null).index;
			}
			else {
				default_cam_index = -1;
				cams = null;
				debug("No Cameras found!");
			}
		}
        public function initializeMics():void {
			if (Microphone.names.length > 0) {
					mics = new Array();
				for (var i:uint = 0; i < Microphone.names.length; ++i) {
					debug("Found Microphone " + i + "	: " + Microphone.names[i]);
					mics.push(Microphone.getMicrophone(i));
					mics[i].codec = SoundCodec.SPEEX;
					mics[i].rate = 11; // Microphone default
					mics[i].framesPerPacket = 2; // Microphone default
					mics[i].encodeQuality = 6; // Microphone default [0, 10]
					mics[i].setSilenceLevel(0); // NOTE: needed due to strange bug
					//mics[i].setEchoSuppression(false);
				}
				default_mic_index = Microphone.getMicrophone(-1).index;
			}
			else {
				default_mic_index = -1;
				mics = null;
				debug("No Microphones found!");
			}
		}
		public function initializeSettings():void {
			settings = SharedObject.getLocal("RamuneSettings");

			// Presets do NOT exist
			if (!settings.data.hadOwnProperty("Automatic")) {
				debug("Ramune Settings do not exist. Creating...");
								
				var automatic:Object = {
					name: "Automatic",
					camera: "Automatic",
					microphone: "Automatic"
				};

				settings.data.presets = new Array();
				settings.data.presets.push(automatic);
			}
			else { // Presets DO exist
				debug("Ramune Settings do exist.");
			}
			
			readSettings();
		}
		public function readSettings():void {
			
			if ("Automatic") { // FIXME: Implement
				if (cams != null) {
					if (Capabilities.os.search("Mac") != -1)
						default_cam_index = findCameraIndexByName("USB Video Class Video");
					else
						default_cam_index = Camera.getCamera(null).index;
				}
				if (mics != null) {
					default_mic_index = Microphone.getMicrophone(-1).index;
				}
			}

		}
		public function findCameraIndexByName(name:String):int {
			if (name != null)
				for (var i:int = 0; i < this.cams.length; ++i)
					if (cams[i].name == name)
						return i;
			return -1;
		}
		public function setSize(width:Number, height:Number):void {	
			previousWidth = this.width;
			previousHeight = this.height;
			this.width = width;
			this.height = height;
			
			// TODO: Should we call a function or do event creation directly?
			ExternalInterface.call("Ramune.triggerResizeEvent", this.width, this.height);
		}
		public function hide():void {
			// detach videos
			this.setSize(0, 0);
		}
		public function show():void {
			this.setSize(previousWidth, previousHeight);
		}
		public function shrink(width:Number, height:Number):void {
			this.setSize(width, height);
			this.ui.resizeVideo(remoteVideoIndex, width, height);
			this.ui.removeVideo(localVideoIndex);
		}
		
		public function grow(width:Number, height:Number):void {
			this.setSize(width, height);
			this.ui.resizeVideo(remoteVideoIndex, width, height);
			this.ui.addVideo(localVideoIndex);
		}
		
		public function showLocal():void {
			this.ui.addVideo(this.localVideoIndex);
		}
		public function hideLocal():void {
			this.ui.removeVideo(this.localVideoIndex);
		}
		
		
		private function debug(msg:String):void {
			trace(msg);
			ExternalInterface.call("console.log", "[RamuneSWF] " + msg);
		}
		private function onDoubleClick():void {
			// TODO: abstract as setFullScreen()
			try {
				if (systemManager.stage.displayState == StageDisplayState.NORMAL) {
					var prevWidth:Number = ui.width;
					var prevHeight:Number = ui.height;
					//==var prevWidth:Number = cam.width;
					//var prevHeight:Number = cam.height;					
					var videoPoint : Point = this.localToGlobal( new Point(ui.x, ui.y) );
					
					stage.fullScreenSourceRect = new Rectangle( videoPoint.x, videoPoint.y, prevWidth, prevHeight );
		    		stage.displayState = StageDisplayState.FULL_SCREEN;
				}
				else {
					stage.displayState = StageDisplayState.NORMAL;
				}
			}
			catch (err:SecurityError) {
				debug("Caught SecurityError!");
			}
		}

		// FIXME: Should be in it's on file/lib
	    protected function parseParams():void {
	    	var swf_params:Object = Application.application.parameters;
	   		for (var key:* in params) {
	        	if (swf_params[key] != null && swf_params[key] != "") {
	        		debug("Parameter: " + key.toString() + " => " + swf_params[key]);
	        		params[key] = swf_params[key];
	        	}
	        }
	    }
	]]>
	</mx:Script>
	<ramune:RamuneUI id="ui" width="100%" height="100%"/>
</mx:Application>

